{"version":3,"sources":["Visual.js","App.js","index.js"],"names":["uniforms","scene","renderer","analyser","audioData","lastMaterial","App","state","lastVisual","componentDidMount","startVisual","componentDidUpdate","a","console","log","props","shader","children","material","setValues","fragmentShader","needsUpdate","clearThree","clear","traverse","object","isMesh","geometry","dispose","isMaterial","cleanMaterial","Object","keys","value","createScene","resizeRendererToDisplaySize","animate","time","setTimeout","requestAnimationFrame","canvas","getByteFrequencyData","iTime","iResolution","set","width","height","iChannel0","render","camera","needResize","window","innerWidth","innerHeight","setSize","THREE","plane","fftSize","iChannel1","iChannel2","iChannel3","add","cancelAnimationFrame","source","audioCtx","createAnalyser","connect","Uint8Array","frequencyBinCount","resume","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","Component","Mic","visualNumber","getVisual","n","fetch","headers","Accept","then","r","json","data","setState","document","getElementById","changeVisual","e","parseFloat","target","this","AudioContext","mediaDevices","audio","stream","createMediaStreamSource","id","onClick","rootElement","ReactDOM"],"mappings":"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","file":"static/js/main.ceeac1b1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport \"./App.css\";\r\nlet uniforms,\r\n  scene,\r\n  renderer,\r\n  animateTimeout,\r\n  resizeTimeout,\r\n  analyser,\r\n  audioData,\r\n  lastMaterial;\r\nclass App extends Component {\r\n  state = {\r\n    lastVisual: null,\r\n    scene: null\r\n    // ,\r\n    // material: null\r\n  };\r\n  componentDidMount = () => {\r\n    // console.log(\"didmount\");\r\n    this.startVisual(analyser);\r\n    \r\n  };\r\n  componentDidUpdate = async () => {\r\n    console.log(\"didupdate\");\r\n    // console.trace();\r\n    // if (this.props.shader !== this.state.lastVisual) {\r\n    //   if (scene) {\r\n    //     await this.clearThree();\r\n    //     uniforms = null;\r\n    //     scene = null;\r\n\r\n    //     clearTimeout(animateTimeout);\r\n    //     clearTimeout(resizeTimeout);\r\n    //   }\r\n    //   this.startVisual();\r\n    // }\r\n    \r\n    console.log(\"scene\", this.props.shader);\r\n    scene.children[0].material.setValues({\r\n      fragmentShader: this.props.shader,\r\n      uniforms\r\n    });\r\n    scene.children[0].material.needsUpdate = true;\r\n  };\r\n  clearThree = () => {\r\n    renderer.clear();\r\n    scene.traverse((object) => {\r\n      if (!object.isMesh) return;\r\n\r\n      object.geometry.dispose();\r\n\r\n      if (object.material.isMaterial) {\r\n        this.cleanMaterial(object.material);\r\n      } else {\r\n        // an array of materials\r\n        for (const material of object.material) this.cleanMaterial(material);\r\n      }\r\n    });\r\n    return;\r\n  };\r\n\r\n  cleanMaterial = (material) => {\r\n    material.dispose();\r\n    // dispose textures\r\n    for (const key of Object.keys(material)) {\r\n      const value = material[key];\r\n      if (value && typeof value === \"object\" && \"minFilter\" in value) {\r\n        value.dispose();\r\n      }\r\n    }\r\n  };\r\n  startVisual = async () => {\r\n    window.cancelAnimationFrame(animate);\r\n\r\n    let { source, audioCtx } = this.props;\r\n    let shader = this.props.shader;\r\n    const canvas = this.props.canvas;\r\n\r\n    if (!analyser) {\r\n      console.log(\"new ana\");\r\n      analyser = audioCtx.createAnalyser();\r\n      source.connect(analyser);\r\n    }\r\n    if (!audioData) {\r\n      audioData = new Uint8Array(analyser.frequencyBinCount);\r\n    }\r\n\r\n    if (!renderer) {\r\n      console.log(\"new renderer\");\r\n      renderer = new THREE.WebGLRenderer({ canvas });\r\n    } else {\r\n      //renderer.dispose();\r\n      renderer.clear();\r\n    }\r\n\r\n    const camera = new THREE.OrthographicCamera(\r\n      -1, // left\r\n      1, // right\r\n      1, // top\r\n      -1, // bottom\r\n      -1, // near,\r\n      1 // far\r\n    );\r\n\r\n    if (canvas) {\r\n      audioCtx.resume();\r\n      createScene();\r\n      animateTimeout = setTimeout(() => animate(), 144 / 1000);\r\n    }\r\n\r\n    // renderer.autoClearColor = false;\r\n\r\n    function createScene() {\r\n      if (!scene) {\r\n        scene = new THREE.Scene();\r\n      }\r\n      const plane = new THREE.PlaneBufferGeometry(2, 2);\r\n\r\n      uniforms = {\r\n        iTime: { value: 0 },\r\n        iResolution: { value: new THREE.Vector3() },\r\n        iChannel0: {\r\n          value: new THREE.DataTexture(\r\n            audioData,\r\n            analyser.fftSize / 2,\r\n            1,\r\n            THREE.LuminanceFormat\r\n          )\r\n        },\r\n        iChannel1: {\r\n          value: new THREE.DataTexture(\r\n            audioData,\r\n            analyser.fftSize / 2,\r\n            1,\r\n            THREE.LuminanceFormat\r\n          )\r\n        },\r\n        iChannel2: {\r\n          value: new THREE.DataTexture(\r\n            audioData,\r\n            analyser.fftSize / 2,\r\n            1,\r\n            THREE.LuminanceFormat\r\n          )\r\n        },\r\n        iChannel3: {\r\n          value: new THREE.DataTexture(\r\n            audioData,\r\n            analyser.fftSize / 2,\r\n            1,\r\n            THREE.LuminanceFormat\r\n          )\r\n        }\r\n      };\r\n\r\n      lastMaterial = new THREE.ShaderMaterial({\r\n        fragmentShader: shader,\r\n        uniforms\r\n      });\r\n\r\n      scene.add(new THREE.Mesh(plane, lastMaterial));\r\n    }\r\n\r\n    navigator.getUserMedia =\r\n      navigator.getUserMedia ||\r\n      navigator.webkitGetUserMedia ||\r\n      navigator.mozGetUserMedia ||\r\n      navigator.msGetUserMedia;\r\n\r\n    function resizeRendererToDisplaySize(renderer) {\r\n      const needResize =\r\n        canvas.width !== window.innerWidth ||\r\n        canvas.height !== window.innerHeight;\r\n      if (needResize) {\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      }\r\n      return needResize;\r\n    }\r\n\r\n    function animate(time) {\r\n      //console.log(timeouts);\r\n      animateTimeout = setTimeout(\r\n        () => requestAnimationFrame(animate),\r\n        144 / 1000\r\n      );\r\n\r\n      resizeTimeout = setTimeout(\r\n        () => resizeRendererToDisplaySize(renderer, canvas),\r\n        144 / 1000\r\n      );\r\n\r\n      analyser.getByteFrequencyData(audioData);\r\n\r\n      time *= 0.001;\r\n\r\n      uniforms.iTime.value = time;\r\n      uniforms.iResolution.value.set(canvas.width, canvas.height, 1);\r\n      uniforms.iChannel0.value.needsUpdate = true;\r\n\r\n      renderer.render(scene, camera);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <div />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from \"react\";\r\nimport App from \"./Visual\";\r\nimport \"./App.css\";\r\n\r\nclass Mic extends Component {\r\n  state = {\r\n    source: \"\",\r\n    audioCtx: \"\",\r\n    shader: \"\",\r\n    canvas: \"\",\r\n    visualNumber: 11\r\n  };\r\n  componentDidMount() {\r\n    let { source, audioCtx } = this.state;\r\n\r\n    audioCtx = new AudioContext();\r\n\r\n    navigator.mediaDevices\r\n      .getUserMedia({\r\n        audio: true\r\n      })\r\n      .then((stream) => {\r\n        source = audioCtx.createMediaStreamSource(stream);\r\n\r\n        this.setState({\r\n          source,\r\n          audioCtx\r\n        });\r\n      });\r\n\r\n    this.getVisual(11);\r\n  }\r\n  getVisual = (n) => {\r\n    fetch(`./${n}.json`, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      }\r\n    })\r\n      .then((r) => r.json())\r\n      .then((data) => {\r\n        this.setState({ visualNumber: n, shader: data.shader });\r\n      });\r\n  };\r\n  componentDidUpdate = () => {\r\n    const canvas = document.getElementById(\"visualizerCanvas\");\r\n    if (this.state.canvas !== canvas) {\r\n      this.setState({\r\n        canvas\r\n      });\r\n    }\r\n  };\r\n  changeVisual = (e) => {\r\n    let value =\r\n      parseFloat(this.state.visualNumber) + parseFloat(e.target.value);\r\n    // console.log(value);\r\n    if (value > 0 && value < 17) {\r\n      // this.setState({ visualNumber: value });\r\n      this.getVisual(value);\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.audioCtx && this.state.canvas && this.state.shader ? (\r\n          <div>\r\n            <App\r\n              source={this.state.source}\r\n              audioCtx={this.state.audioCtx}\r\n              shader={this.state.shader}\r\n              canvas={this.state.canvas}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <div id=\"next\">\r\n          <button onClick={this.changeVisual} value={1}>\r\n            Next\r\n          </button>\r\n        </div>\r\n        <div id=\"prev\">\r\n          <button onClick={this.changeVisual} value={-1}>\r\n            Previous\r\n          </button>\r\n        </div>\r\n        <canvas id=\"visualizerCanvas\"></canvas>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mic;\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}