{
  "phenotype_classification": "Dancer",
  "mood": {
    "valance": 0.8,
    "energy": 0.65
  },
  "shader":"\n      uniform vec3 iResolution;\n      uniform float iTime;\n      uniform sampler2D iChannel0;\n      // credit: https://www.shadertoy.com/view/4tGXzt\n\n      #define BEATMOVE 1\n\n      const float FREQ_RANGE = 64.0;\n      const float PI = 3.1415;\n      const float RADIUS = 0.6;\n      const float BRIGHTNESS = 0.2;\n      const float SPEED = 0.5;\n\n      //convert HSV to RGB\n      vec3 hsv2rgb(vec3 c){\n          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n          vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n      }\n\n      float luma(vec3 color) {\n        return dot(color, vec3(0.299, 0.587, 0.114));\n      }\n\n      float getfrequency(float x) {\n        return texture(iChannel0, vec2(floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE, 0.25)).x + 0.06;\n      }\n\n      float getfrequency_smooth(float x) {\n        float index = floor(x * FREQ_RANGE) / FREQ_RANGE;\n          float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;\n        return mix(getfrequency(index), getfrequency(next), smoothstep(0.0, 1.0, fract(x * FREQ_RANGE)));\n      }\n\n      float getfrequency_blend(float x) {\n          return mix(getfrequency(x), getfrequency_smooth(x), 0.5);\n      }\n\n      vec3 doHalo(vec2 fragment, float radius) {\n        float dist = length(fragment);\n        float ring = 1.0 / abs(dist - radius);\n        \n        float b = dist < radius ? BRIGHTNESS * 0.3 : BRIGHTNESS;\n        \n        vec3 col = vec3(0.0);\n        \n        float angle = atan(fragment.x, fragment.y);\n        col += hsv2rgb( vec3( ( angle + iTime * 0.25 ) / (PI * 2.0), 1.0, 1.0 ) ) * ring * b;\n        \n        float frequency = max(getfrequency_blend(abs(angle / PI)) - 0.02, 0.0);\n        col *= frequency;\n        \n        // Black halo\n        col *= smoothstep(radius * 0.5, radius, dist);\n        \n        return col;\n      }\n\n      vec3 doLine(vec2 fragment, float radius, float x) {\n        vec3 col = hsv2rgb(vec3(x * 0.23 + iTime * 0.12, 1.0, 1.0));\n        \n        float freq = abs(fragment.x * 0.5);\n        \n        col *= (1.0 / abs(fragment.y)) * BRIGHTNESS * getfrequency(freq);\t\n        col = col * smoothstep(radius, radius * 1.8, abs(fragment.x));\n        \n        return col;\n      }\n\n      void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n          vec2 fragPos = fragCoord / iResolution.xy;\n        fragPos = (fragPos - 0.5) * 2.0;\n          fragPos.x *= iResolution.x / iResolution.y;\n        \n        vec3 color = vec3(0.0134, 0.052, 0.1);\n        color += doHalo(fragPos, RADIUS);\n\n          float c = cos(iTime * SPEED);\n          float s = sin(iTime * SPEED);\n          vec2 rot = mat2(c,s,-s,c) * fragPos;\n        color += doLine(rot, RADIUS, rot.x);\n        \n        color += max(luma(color) - 1.0, 0.0);\n          \n        fragColor = vec4(color, 1.0);\n      }\n      \n      void main() {\n        mainImage(gl_FragColor, gl_FragCoord.xy);\n      }" 
}
